plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.13.0'
    id 'java'
    id 'io.toolebox.git-versioner' version '1.6.7'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'com.diffplug.spotless:spotless-plugin-gradle:6.13.0'

    // This dependency is used by the application.
    implementation libs.guava

    implementation 'org.telegram:telegrambots:6.9.0'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

    withJavadocJar()
    withSourcesJar()
}

jar{
    manifest {
        attributes(
                'Main-Class': 'telegrambot.App'
        )
    }

    // Include dependencies in jar
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

versioner {
    pattern {
        pattern = ''
    }

    startFrom {
        major = 1
        minor = 0
        patch = 2
    }
}

versioner.apply()

application {
    // Define the main class for the application.
    mainClass = 'telegrambot.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

javadoc{
    options.memberLevel = JavadocMemberLevel.PRIVATE
    source = sourceSets.main.allJava
    destinationDir = file("${project.rootDir}/docs")
    title = 'Telegram Bot'
}

def taskX = tasks.register('javadocCopy') {
    def directory = file(project.rootDir.absolutePath + '/javadoc/')

    directory.mkdir()
    copy {
        from "${project.rootDir}/app/build/libs/app-javadoc.jar"
        into directory.toPath()
    }
    copy {
        from "${project.rootDir}/app/build/libs/app-sources.jar"
        into directory.toPath()
    }
}

tasks.named('build') { finalizedBy('javadocCopy') }

spotless {
    java {
        importOrder()
        eclipse()
        formatAnnotations()
    }
}

checkstyle {
    toolVersion '10.3.3'
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
    maxWarnings = 0
    maxErrors = 0
    showViolations = false
}

checkstyleMain {
    ant.lifecycleLogLevel = 'INFO'
}

checkstyleTest {
    ant.lifecycleLogLevel = 'INFO'
}
